#!/usr/bin/python

import time
import numpy as np

#tos stuff
from DecodedMsg import *
from tinyos.message import MoteIF

class MyClass:
	def __init__(self,N):
		self.N = N
		self.A = make_A_matrix(self.N)
		self.counter = 0;
		self.perform_svd = 0;
		# Create a MoteIF
		self.mif = MoteIF.MoteIF()
		# Attach a source to it
		self.source = self.mif.addSource("sf@localhost:9002")

		# SomeMessageClass.py would be generated by MIG
		self.mif.addListener(self, DecodedMsg)

	# Called by the MoteIF's receive thread when a new message
	# is received
	def receive(self, src, msg):
		m = DecodedMsg(msg.dataGet())
		self.counter = m.get_counter()
		timeformat = '%Y/%d/%m %H:%M:%S'
		print 'Received message %s: counter: %d' % (time.strftime(timeformat), self.counter)
		if m.get_perform_svd():
			print '  svd received:'
			Svals = m.get_A()
			print Svals
			U,S,V = np.linalg.svd(self.A)
			print '  svd check:'
			print [s**2 for s in S]
			self.perform_svd = 0
			self.A = make_A_matrix(self.N)
		self.counter += 1
		self.perform_svd = self.counter % (self.N+1)
		self.send()

	def send(self):
		smsg = DecodedMsg()
		smsg.set_counter(self.counter)
		smsg.set_perform_svd(self.perform_svd)
		if self.perform_svd:
			smsg.set_A(self.A)
			#smsg.set_A1(self.A[1])
		self.mif.sendMsg(self.source, 0xFFFF, smsg.get_amType(), 0, smsg)

def make_A_matrix(N):
	A = np.random.randn(N,N)
	return A

if __name__ == "__main__":
	print "Running"
	m = MyClass(2)
