#import os
#import sys
import time
#import struct

#tos stuff
from TestSerialMsg import *
from tinyos.message import MoteIF
#import TestSerialMsg
#from tinyos.message import *
#from tinyos.message.Message import *
#from tinyos.message.SerialPacket import *
#from tinyos.packet.Serial import Serial

class MyClass:
	def __init__(self):
		# Create a MoteIF
		self.mif = MoteIF.MoteIF()
		# Attach a source to it
		self.source = self.mif.addSource("sf@localhost:9002")

		# SomeMessageClass.py would be generated by MIG
		self.mif.addListener(self, TestSerialMsg)

	# Called by the MoteIF's receive thread when a new message
	# is received
	def receive(self, src, msg):
		m = TestSerialMsg(msg.dataGet())
		print "Received message: "
		print 'timestamp %d: counter: %d' % (time.time(), m.get_counter())

if __name__ == "__main__":
	print "Running"
	m = MyClass()

#class DataLogger:
	#def __init__(self, motestring):
		#print motestring
		#self.mif = MoteIF.MoteIF()
		#self.tos_source = self.mif.addSource("network at 128.83.52.80:10002")
		##(motestring)
		#self.mif.addListener(self, TestSerialMsg.TestSerialMsg)

	#def receive(self, src, msg):
		#if msg.get_amType() == TestSerialMsg.AM_TYPE:
			#print msg
			#m = TestSerialMsg.TestSerialMsg(msg.dataGet())
			#print time.time(), m.get_counter()

		#sys.stdout.flush()

	#def main_loop(self):
		#while 1:
			#time.sleep(1)

#def main():

	#if '-h' in sys.argv or len(sys.argv) < 1:
		#print "Usage:", sys.argv[0], "sf@localhost:9002", "adc_rev_volt <Volt>" 
		#sys.exit()

	#dl = DataLogger(sys.argv[1])
	#dl.main_loop()  # don't expect this to return...

#if __name__ == "__main__":
	#try:
		#main()
	#except KeyboardInterrupt:
		#pass
