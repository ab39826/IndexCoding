#import os
#import sys
import time
import os.path
#import struct

#tos stuff
from SerialMsg import *
from tinyos.message import MoteIF
#import DecodedMsg
#from tinyos.message import *
#from tinyos.message.Message import *
#from tinyos.message.SerialPacket import *
#from tinyos.packet.Serial import Serial


class TDMALogger:
	def __init__(self, logfile):
		self.logfile = logfile
		self.timeformat = '%Y/%d/%m %H:%M:%S'

		self.num_nodes = 0
		self.num_rounds = 0
		self.num_transmissions = 0
		# Create a MoteIF
		self.mif = MoteIF.MoteIF()
		# Attach a source to it
		self.source = self.mif.addSource("sf@localhost:9002")

		self.setup_logfile()
		# SerialMsg.py autogenerated by MIG
		self.mif.addListener(self, SerialMsg)

	# Called by the MoteIF's receive thread when a new message
	# is received
	def receive(self, src, msg):
		m = SerialMsg(msg.dataGet())
		
		self.num_nodes = m.get_num_nodes()
		self.num_rounds = m.get_num_rounds()
		self.num_transmissions = m.get_num_transmissions()
		print '%s Message Received:' % time.strftime(self.timeformat)
		print '\tK\tRounds\tTransmissions'
		logstring = '%d\t%d\t%d' % (self.num_nodes, self.num_rounds, self.num_transmissions)
		print '\t%s' % logstring
		lf = open(self.logfile, 'a')
		lf.write(logstring)
		lf.write('\n')
		lf.close()


	def setup_logfile(self):
		if not os.path.isfile(self.logfile):
			# create file and header
			lf = open(self.logfile, 'w')
			lf.write('TDMA Log File\n')
			lf.write('%s\n\n' % time.strftime(self.timeformat))
			lf.write('K\tRounds\tTransmissions\n')
			lf.close()


if __name__ == "__main__":
	print "Collectig TDMA experiement results..."
	print '\tK\tRounds\tTransmissions'
	m = TDMALogger('log.txt')
