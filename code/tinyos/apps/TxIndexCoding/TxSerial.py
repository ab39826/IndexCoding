#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'TxSerial'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 58

# The Active Message type associated with this message.
AM_TYPE = 5

class TxSerial(tinyos.message.Message.Message):
    # Create a new TxSerial of size 58.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=58):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <TxSerial> \n"
        try:
            s += "  [num_nodes=0x%x]\n" % (self.get_num_nodes())
        except:
            pass
        try:
            s += "  [num_rounds=0x%x]\n" % (self.get_num_rounds())
        except:
            pass
        try:
            s += "  [num_transmissions=0x%x]\n" % (self.get_num_transmissions())
        except:
            pass
        try:
            s += "  [current_row=0x%x]\n" % (self.get_current_row())
        except:
            pass
        try:
            s += "  [V_coeff=";
            for i in range(0, 8):
                s += "%f " % (self.getElement_V_coeff(i))
            s += "]\n";
        except:
            pass
        try:
            s += "  [data=";
            for i in range(0, 8):
                s += "0x%x " % (self.getElement_data(i) & 0xffff)
            s += "]\n";
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: num_nodes
    #   Field type: short
    #   Offset (bits): 0
    #   Size (bits): 8
    #

    #
    # Return whether the field 'num_nodes' is signed (False).
    #
    def isSigned_num_nodes(self):
        return False
    
    #
    # Return whether the field 'num_nodes' is an array (False).
    #
    def isArray_num_nodes(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'num_nodes'
    #
    def offset_num_nodes(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'num_nodes'
    #
    def offsetBits_num_nodes(self):
        return 0
    
    #
    # Return the value (as a short) of the field 'num_nodes'
    #
    def get_num_nodes(self):
        return self.getUIntElement(self.offsetBits_num_nodes(), 8, 1)
    
    #
    # Set the value of the field 'num_nodes'
    #
    def set_num_nodes(self, value):
        self.setUIntElement(self.offsetBits_num_nodes(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'num_nodes'
    #
    def size_num_nodes(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'num_nodes'
    #
    def sizeBits_num_nodes(self):
        return 8
    
    #
    # Accessor methods for field: num_rounds
    #   Field type: long
    #   Offset (bits): 8
    #   Size (bits): 32
    #

    #
    # Return whether the field 'num_rounds' is signed (False).
    #
    def isSigned_num_rounds(self):
        return False
    
    #
    # Return whether the field 'num_rounds' is an array (False).
    #
    def isArray_num_rounds(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'num_rounds'
    #
    def offset_num_rounds(self):
        return (8 / 8)
    
    #
    # Return the offset (in bits) of the field 'num_rounds'
    #
    def offsetBits_num_rounds(self):
        return 8
    
    #
    # Return the value (as a long) of the field 'num_rounds'
    #
    def get_num_rounds(self):
        return self.getUIntElement(self.offsetBits_num_rounds(), 32, 1)
    
    #
    # Set the value of the field 'num_rounds'
    #
    def set_num_rounds(self, value):
        self.setUIntElement(self.offsetBits_num_rounds(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'num_rounds'
    #
    def size_num_rounds(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'num_rounds'
    #
    def sizeBits_num_rounds(self):
        return 32
    
    #
    # Accessor methods for field: num_transmissions
    #   Field type: long
    #   Offset (bits): 40
    #   Size (bits): 32
    #

    #
    # Return whether the field 'num_transmissions' is signed (False).
    #
    def isSigned_num_transmissions(self):
        return False
    
    #
    # Return whether the field 'num_transmissions' is an array (False).
    #
    def isArray_num_transmissions(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'num_transmissions'
    #
    def offset_num_transmissions(self):
        return (40 / 8)
    
    #
    # Return the offset (in bits) of the field 'num_transmissions'
    #
    def offsetBits_num_transmissions(self):
        return 40
    
    #
    # Return the value (as a long) of the field 'num_transmissions'
    #
    def get_num_transmissions(self):
        return self.getUIntElement(self.offsetBits_num_transmissions(), 32, 1)
    
    #
    # Set the value of the field 'num_transmissions'
    #
    def set_num_transmissions(self, value):
        self.setUIntElement(self.offsetBits_num_transmissions(), 32, value, 1)
    
    #
    # Return the size, in bytes, of the field 'num_transmissions'
    #
    def size_num_transmissions(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of the field 'num_transmissions'
    #
    def sizeBits_num_transmissions(self):
        return 32
    
    #
    # Accessor methods for field: current_row
    #   Field type: short
    #   Offset (bits): 72
    #   Size (bits): 8
    #

    #
    # Return whether the field 'current_row' is signed (False).
    #
    def isSigned_current_row(self):
        return False
    
    #
    # Return whether the field 'current_row' is an array (False).
    #
    def isArray_current_row(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'current_row'
    #
    def offset_current_row(self):
        return (72 / 8)
    
    #
    # Return the offset (in bits) of the field 'current_row'
    #
    def offsetBits_current_row(self):
        return 72
    
    #
    # Return the value (as a short) of the field 'current_row'
    #
    def get_current_row(self):
        return self.getUIntElement(self.offsetBits_current_row(), 8, 1)
    
    #
    # Set the value of the field 'current_row'
    #
    def set_current_row(self, value):
        self.setUIntElement(self.offsetBits_current_row(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'current_row'
    #
    def size_current_row(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'current_row'
    #
    def sizeBits_current_row(self):
        return 8
    
    #
    # Accessor methods for field: V_coeff
    #   Field type: float[]
    #   Offset (bits): 80
    #   Size of each element (bits): 32
    #

    #
    # Return whether the field 'V_coeff' is signed (False).
    #
    def isSigned_V_coeff(self):
        return False
    
    #
    # Return whether the field 'V_coeff' is an array (True).
    #
    def isArray_V_coeff(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'V_coeff'
    #
    def offset_V_coeff(self, index1):
        offset = 80
        if index1 < 0 or index1 >= 8:
            raise IndexError
        offset += 0 + index1 * 32
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'V_coeff'
    #
    def offsetBits_V_coeff(self, index1):
        offset = 80
        if index1 < 0 or index1 >= 8:
            raise IndexError
        offset += 0 + index1 * 32
        return offset
    
    #
    # Return the entire array 'V_coeff' as a float[]
    #
    def get_V_coeff(self):
        tmp = [None]*8
        for index0 in range (0, self.numElements_V_coeff(0)):
                tmp[index0] = self.getElement_V_coeff(index0)
        return tmp
    
    #
    # Set the contents of the array 'V_coeff' from the given float[]
    #
    def set_V_coeff(self, value):
        for index0 in range(0, len(value)):
            self.setElement_V_coeff(index0, value[index0])

    #
    # Return an element (as a float) of the array 'V_coeff'
    #
    def getElement_V_coeff(self, index1):
        return self.getFloatElement(self.offsetBits_V_coeff(index1), 32, 0)
    
    #
    # Set an element of the array 'V_coeff'
    #
    def setElement_V_coeff(self, index1, value):
        self.setFloatElement(self.offsetBits_V_coeff(index1), 32, value, 0)
    
    #
    # Return the total size, in bytes, of the array 'V_coeff'
    #
    def totalSize_V_coeff(self):
        return (256 / 8)
    
    #
    # Return the total size, in bits, of the array 'V_coeff'
    #
    def totalSizeBits_V_coeff(self):
        return 256
    
    #
    # Return the size, in bytes, of each element of the array 'V_coeff'
    #
    def elementSize_V_coeff(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'V_coeff'
    #
    def elementSizeBits_V_coeff(self):
        return 32
    
    #
    # Return the number of dimensions in the array 'V_coeff'
    #
    def numDimensions_V_coeff(self):
        return 1
    
    #
    # Return the number of elements in the array 'V_coeff'
    #
    def numElements_V_coeff():
        return 8
    
    #
    # Return the number of elements in the array 'V_coeff'
    # for the given dimension.
    #
    def numElements_V_coeff(self, dimension):
        array_dims = [ 8,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
    #
    # Accessor methods for field: data
    #   Field type: int[]
    #   Offset (bits): 336
    #   Size of each element (bits): 16
    #

    #
    # Return whether the field 'data' is signed (False).
    #
    def isSigned_data(self):
        return False
    
    #
    # Return whether the field 'data' is an array (True).
    #
    def isArray_data(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'data'
    #
    def offset_data(self, index1):
        offset = 336
        if index1 < 0 or index1 >= 8:
            raise IndexError
        offset += 0 + index1 * 16
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'data'
    #
    def offsetBits_data(self, index1):
        offset = 336
        if index1 < 0 or index1 >= 8:
            raise IndexError
        offset += 0 + index1 * 16
        return offset
    
    #
    # Return the entire array 'data' as a int[]
    #
    def get_data(self):
        tmp = [None]*8
        for index0 in range (0, self.numElements_data(0)):
                tmp[index0] = self.getElement_data(index0)
        return tmp
    
    #
    # Set the contents of the array 'data' from the given int[]
    #
    def set_data(self, value):
        for index0 in range(0, len(value)):
            self.setElement_data(index0, value[index0])

    #
    # Return an element (as a int) of the array 'data'
    #
    def getElement_data(self, index1):
        return self.getUIntElement(self.offsetBits_data(index1), 16, 1)
    
    #
    # Set an element of the array 'data'
    #
    def setElement_data(self, index1, value):
        self.setUIntElement(self.offsetBits_data(index1), 16, value, 1)
    
    #
    # Return the total size, in bytes, of the array 'data'
    #
    def totalSize_data(self):
        return (128 / 8)
    
    #
    # Return the total size, in bits, of the array 'data'
    #
    def totalSizeBits_data(self):
        return 128
    
    #
    # Return the size, in bytes, of each element of the array 'data'
    #
    def elementSize_data(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'data'
    #
    def elementSizeBits_data(self):
        return 16
    
    #
    # Return the number of dimensions in the array 'data'
    #
    def numDimensions_data(self):
        return 1
    
    #
    # Return the number of elements in the array 'data'
    #
    def numElements_data():
        return 8
    
    #
    # Return the number of elements in the array 'data'
    # for the given dimension.
    #
    def numElements_data(self, dimension):
        array_dims = [ 8,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
