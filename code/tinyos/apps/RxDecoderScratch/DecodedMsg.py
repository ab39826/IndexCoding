#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'DecodedMsg'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 36

# The Active Message type associated with this message.
AM_TYPE = 137

class DecodedMsg(tinyos.message.Message.Message):
    # Create a new DecodedMsg of size 36.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=36):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <DecodedMsg> \n"
        try:
            s += "  [V_coeff=";
            for i in range(0, 8):
                s += "%f " % (self.getElement_V_coeff(i))
            s += "]\n";
        except:
            pass
        try:
            s += "  [data=";
            for i in range(0, 1):
                s += "0x%x " % (self.getElement_data(i) & 0xffff)
            s += "]\n";
        except:
            pass
        try:
            s += "  [crow=0x%x]\n" % (self.get_crow())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: V_coeff
    #   Field type: float[]
    #   Offset (bits): 0
    #   Size of each element (bits): 32
    #

    #
    # Return whether the field 'V_coeff' is signed (False).
    #
    def isSigned_V_coeff(self):
        return False
    
    #
    # Return whether the field 'V_coeff' is an array (True).
    #
    def isArray_V_coeff(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'V_coeff'
    #
    def offset_V_coeff(self, index1):
        offset = 0
        if index1 < 0 or index1 >= 8:
            raise IndexError
        offset += 0 + index1 * 32
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'V_coeff'
    #
    def offsetBits_V_coeff(self, index1):
        offset = 0
        if index1 < 0 or index1 >= 8:
            raise IndexError
        offset += 0 + index1 * 32
        return offset
    
    #
    # Return the entire array 'V_coeff' as a float[]
    #
    def get_V_coeff(self):
        tmp = [None]*8
        for index0 in range (0, self.numElements_V_coeff(0)):
                tmp[index0] = self.getElement_V_coeff(index0)
        return tmp
    
    #
    # Set the contents of the array 'V_coeff' from the given float[]
    #
    def set_V_coeff(self, value):
        for index0 in range(0, len(value)):
            self.setElement_V_coeff(index0, value[index0])

    #
    # Return an element (as a float) of the array 'V_coeff'
    #
    def getElement_V_coeff(self, index1):
        return self.getFloatElement(self.offsetBits_V_coeff(index1), 32, 0)
    
    #
    # Set an element of the array 'V_coeff'
    #
    def setElement_V_coeff(self, index1, value):
        self.setFloatElement(self.offsetBits_V_coeff(index1), 32, value, 0)
    
    #
    # Return the total size, in bytes, of the array 'V_coeff'
    #
    def totalSize_V_coeff(self):
        return (256 / 8)
    
    #
    # Return the total size, in bits, of the array 'V_coeff'
    #
    def totalSizeBits_V_coeff(self):
        return 256
    
    #
    # Return the size, in bytes, of each element of the array 'V_coeff'
    #
    def elementSize_V_coeff(self):
        return (32 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'V_coeff'
    #
    def elementSizeBits_V_coeff(self):
        return 32
    
    #
    # Return the number of dimensions in the array 'V_coeff'
    #
    def numDimensions_V_coeff(self):
        return 1
    
    #
    # Return the number of elements in the array 'V_coeff'
    #
    def numElements_V_coeff():
        return 8
    
    #
    # Return the number of elements in the array 'V_coeff'
    # for the given dimension.
    #
    def numElements_V_coeff(self, dimension):
        array_dims = [ 8,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
    #
    # Accessor methods for field: data
    #   Field type: int[]
    #   Offset (bits): 256
    #   Size of each element (bits): 16
    #

    #
    # Return whether the field 'data' is signed (False).
    #
    def isSigned_data(self):
        return False
    
    #
    # Return whether the field 'data' is an array (True).
    #
    def isArray_data(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'data'
    #
    def offset_data(self, index1):
        offset = 256
        if index1 < 0 or index1 >= 1:
            raise IndexError
        offset += 0 + index1 * 16
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'data'
    #
    def offsetBits_data(self, index1):
        offset = 256
        if index1 < 0 or index1 >= 1:
            raise IndexError
        offset += 0 + index1 * 16
        return offset
    
    #
    # Return the entire array 'data' as a int[]
    #
    def get_data(self):
        tmp = [None]*1
        for index0 in range (0, self.numElements_data(0)):
                tmp[index0] = self.getElement_data(index0)
        return tmp
    
    #
    # Set the contents of the array 'data' from the given int[]
    #
    def set_data(self, value):
        for index0 in range(0, len(value)):
            self.setElement_data(index0, value[index0])

    #
    # Return an element (as a int) of the array 'data'
    #
    def getElement_data(self, index1):
        return self.getUIntElement(self.offsetBits_data(index1), 16, 1)
    
    #
    # Set an element of the array 'data'
    #
    def setElement_data(self, index1, value):
        self.setUIntElement(self.offsetBits_data(index1), 16, value, 1)
    
    #
    # Return the total size, in bytes, of the array 'data'
    #
    def totalSize_data(self):
        return (16 / 8)
    
    #
    # Return the total size, in bits, of the array 'data'
    #
    def totalSizeBits_data(self):
        return 16
    
    #
    # Return the size, in bytes, of each element of the array 'data'
    #
    def elementSize_data(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'data'
    #
    def elementSizeBits_data(self):
        return 16
    
    #
    # Return the number of dimensions in the array 'data'
    #
    def numDimensions_data(self):
        return 1
    
    #
    # Return the number of elements in the array 'data'
    #
    def numElements_data():
        return 1
    
    #
    # Return the number of elements in the array 'data'
    # for the given dimension.
    #
    def numElements_data(self, dimension):
        array_dims = [ 1,  ]
        if dimension < 0 or dimension >= 1:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
    #
    # Accessor methods for field: crow
    #   Field type: int
    #   Offset (bits): 272
    #   Size (bits): 16
    #

    #
    # Return whether the field 'crow' is signed (False).
    #
    def isSigned_crow(self):
        return False
    
    #
    # Return whether the field 'crow' is an array (False).
    #
    def isArray_crow(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'crow'
    #
    def offset_crow(self):
        return (272 / 8)
    
    #
    # Return the offset (in bits) of the field 'crow'
    #
    def offsetBits_crow(self):
        return 272
    
    #
    # Return the value (as a int) of the field 'crow'
    #
    def get_crow(self):
        return self.getUIntElement(self.offsetBits_crow(), 16, 1)
    
    #
    # Set the value of the field 'crow'
    #
    def set_crow(self, value):
        self.setUIntElement(self.offsetBits_crow(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'crow'
    #
    def size_crow(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'crow'
    #
    def sizeBits_crow(self):
        return 16
    
